#######################################################################
# Test for copying block of size 63;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $63, %rdx		# src and dst have 63 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	halt			# should halt with num nonzeros in %rax
StartFun:
# name: Yitian Zhou
# student_id: 518030910237

#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
	# Loop header

	xorq %rax,%rax		# count = 0;
	andq %rdx,%rdx		# len > 0?
	jg Loop		# if so, goto Loop:
	ret
	

Loop:	
	iaddq $-9, %rdx			# to test if len < 9
	jl Last_Loop		# if so, goto Last_Loop:

	mrmovq (%rdi), %r8	    # read val0 from src...
	mrmovq 8(%rdi), %r9		# read val1 from src+1...
	mrmovq 16(%rdi), %r10	# read val2 from src+2...
	mrmovq 24(%rdi), %r11	# read val3 from src+3...
	mrmovq 32(%rdi), %r12	# read val4 from src+4...
	mrmovq 40(%rdi), %r13	# read val5 from src+5...
	mrmovq 48(%rdi), %r14	# read val6 from src+6...
	mrmovq 56(%rdi), %rcx	# read val7 from src+7...
	mrmovq 64(%rdi), %rbx	# read val7 from src+8...
                                                                  
	
	rmmovq %r8, (%rsi)	    # ...and store src it to dst
	andq %r8, %r8		    # val0 <= 0?
	jle Npos1		    # if so, goto Npos1:
	iaddq $1, %rax			# count+=1
Npos1:
	rmmovq %r9, 8(%rsi)	# ...and store src+1 it to dst+1
	andq %r9, %r9  	    # val1 <= 0?
	jle Npos2		    # if so, goto Npos2:
	iaddq $1, %rax			# count+=1
Npos2:
	rmmovq %r10, 16(%rsi)	# ...and store src+2 it to dst+2
	andq %r10, %r10		    # val2 <= 0?
	jle Npos3		    # if so, goto Npos3:
	iaddq $1, %rax			# count+=1
Npos3:
	rmmovq %r11, 24(%rsi)	# ...and store src+3 it to dst+3
	andq %r11, %r11		    # val3 <= 0?
	jle Npos4		    # if so, goto Npos4:
	iaddq $1, %rax          # count+=1
Npos4:															
	rmmovq %r12, 32(%rsi)	    # ...and store src+4 it to dst+4
	andq %r12, %r12		    # val4 <= 0?
	jle Npos5		    # if so, goto Npos5:
	iaddq $1, %rax			# count+=1
Npos5:
	rmmovq %r13, 40(%rsi)	# ...and store src+5 it to dst+5
	andq %r13, %r13  	    # val5 <= 0?
	jle Npos6		    # if so, goto Npos6:
	iaddq $1, %rax			# count+=1
Npos6:															
	rmmovq %r14, 48(%rsi)	# ...and store src+6 it to dst+6
	andq %r14, %r14		    # val6 <= 0?
	jle Npos7		    # if so, goto Npos7:
	iaddq $1, %rax			# count+=1
Npos7:
	rmmovq %rcx, 56(%rsi)	# ...and store src+7 it to dst+7
	andq %rcx, %rcx  	    # val7 <= 0?
	jle Npos8		    # if so, goto Npos8:
	iaddq $1, %rax			# count+=1
Npos8:
	rmmovq %rbx, 64(%rsi)	# ...and store src+8 it to dst+8
	andq %rbx, %rbx  	    # val8 <= 0?
	jle Npos9		    # if so, goto Npos9:
	iaddq $1, %rax			# count+=1
Npos9:
	iaddq $72, %rdi			# src+=9
	iaddq $72, %rsi			# dst+=9
	andq %rdx,%rdx			# test len>0
	jg Loop				# if so, goto Loop:
	ret

#Last_Loop:
#	iaddq $9, %rdx
#	je Done				# if len=0, goto Done:
#
#	mrmovq (%rdi), %r8	    # read val from src...
#	mrmovq 8(%rdi), %r9		# read val from src+1...
#	mrmovq 16(%rdi), %r10	# read val from src+2...
#	mrmovq 24(%rdi), %r11	# read val from src+3...
#	mrmovq 32(%rdi), %r12	# read val from src+4...	
#	mrmovq 40(%rdi), %r13	# read val from src+5...
#	mrmovq 48(%rdi), %r14	# read val from src+6...
#	mrmovq 56(%rdi), %rcx	# read val from src+7...	
#						
#   rmmovq %r8, (%rsi)	# ...and store src it to dst
#	andq %r8, %r8		    # val1 <= 0?
#	jle Nposs1		    # if so, goto Nposs1:
#	iaddq $1, %rax			# count+=1
#Nposs1:
#	iaddq $-1, %rdx			# len--
#	jg Nposs11			# else, goto Nposs11: 
#	ret
#Nposs11:
#	rmmovq %r9, 8(%rsi)	# ...and store src+1 it to dst+1
#	andq %r9, %r9  	    # val2 <= 0?
#	jle Nposs2		    # if so, goto Nposs2:
#	iaddq $1, %rax			# count+=1
#Nposs2:
#	iaddq $-1, %rdx			# len--
#	jg Nposs22			# else, goto Nposs22: 
#	ret
#Nposs22:
#	rmmovq %r10, 16(%rsi)	# ...and store src+2 it to dst+2
#	andq %r10, %r10		    # val3 <= 0?
#	jle Nposs3		    # if so, goto Nposs3:
#	iaddq $1, %rax			# count+=1
#Nposs3:
#	iaddq $-1, %rdx			# len--
#	jg Nposs33			# else, goto Nposs33: 
#	ret
#Nposs33:
#	rmmovq %r11, 24(%rsi)	# ...and store src+3 it to dst+3
#	andq %r11, %r11		    # val4 <= 0?
#	jle Nposs4		    # if so, goto Nposs4:
#	iaddq $1, %rax          # count+=1
#Nposs4:	
#	iaddq $-1, %rdx			# len--
#	jg Nposs44			# else, goto Nposs44: 
#	ret
#Nposs44:
#	rmmovq %r12, 32(%rsi)	# ...and store src+2 it to dst+2
#	andq %r12, %r12		    # val5 <= 0?
#	jle Nposs5		    # if so, goto Nposs5:
#	iaddq $1, %rax			# count+=1
#Nposs5:
#	iaddq $-1, %rdx			# len--
#	jg Nposs55			# else, goto Nposs55: 
#	ret
#Nposs55:
#	rmmovq %r13, 40(%rsi)	# ...and store src+2 it to dst+2
#	andq %r13, %r13		    # val6 <= 0?
#	jle Nposs6		    # if so, goto Nposs6:
#	iaddq $1, %rax			# count+=1
#Nposs6:
#	iaddq $-1, %rdx			# len--
#	jg Nposs66			# else, goto Nposs66: 
#	ret
#Nposs66:
#	rmmovq %r14, 48(%rsi)	# ...and store src+2 it to dst+2
#	andq %r14, %r14		    # val6 <= 0?
#	jle Nposs7		    # if so, goto Nposs7:
#	iaddq $1, %rax			# count+=1
#Nposs7:
#	iaddq $-1, %rdx			# len--
#	jg Nposs77			# else, goto Nposs77: 
#	ret
#Nposs77:
#	rmmovq %rcx, 56(%rsi)	# ...and store src it to dst
#	andq %rcx, %rcx 	    # val7 <= 0?
#	jle Done		    # if so, goto Done:
#	iaddq $1, %rax			# count+=1
#

Last_Loop:
	iaddq $6, %rdx			# test the relationship of left and 3

	jl left012				# if left < 3 
	jg left45678					# if left > 3 
	jmp Nposs3				# if left = 3
left012:
	iaddq $2, %rdx			# now left = 0 or 1 or 2, test the relationship of left and 1
	je Nposs1				# if left = 1
	iaddq $-1, %rdx			
	je Nposs2				# if left = 2
	ret						# if left = 0
left45:
	iaddq $1, %rdx			# now left = 4 or 5
	jl Nposs4
	jmp Nposs5
left45678:
	iaddq $-3, %rdx			# test the relationship of left and 6
	jl left45				# if left < 6
	jg left78				# if left > 6
	jmp Nposs6				# if left = 6
left78:			
	iaddq $-1, %rdx			# now left = 7 or 8
	je Nposs7

	mrmovq 56(%rdi), %r10	# read val7 from src+7...
	rmmovq %r10, 56(%rsi)	# ...and store src+7 it to dst+7
	andq %r10, %r10		    # val7 <= 0?

Nposs7:
	mrmovq 48(%rdi), %r10	# read val6 from src+6...
	jle Nposs77			# if so, goto Nposs77:
	iaddq $1, %rax			# count++
Nposs77:
	rmmovq %r10, 48(%rsi)	# ...and store src+6 it to dst+6
	andq %r10, %r10		    # val6 <= 0?

Nposs6:
	mrmovq 40(%rdi), %r10	# read val5 from src+5...
	jle Nposs66			# if so, goto Nposs66:
	iaddq $1, %rax			# count++
Nposs66:
	rmmovq %r10, 40(%rsi)	# ...and store src+5 it to dst+5
	andq %r10, %r10		    # val5 <= 0?

Nposs5:
	mrmovq 32(%rdi), %r10	# read val4 from src+4...
	jle Nposs55			# if so, goto Nposs55:
	iaddq $1, %rax			# count++
Nposs55:
	rmmovq %r10, 32(%rsi)	# ...and store src+4 it to dst+4
	andq %r10, %r10		    # val4 <= 0?

Nposs4:
	mrmovq 24(%rdi), %r10	# read val3 from src+3...
	jle Nposs44			# if so, goto Nposs44:
	iaddq $1, %rax			# count++
Nposs44:	
	rmmovq %r10, 24(%rsi)	# ...and store src+3 it to dst+3
	andq %r10, %r10		    # val3 <= 0?

Nposs3:
	mrmovq 16(%rdi), %r10	# read val2 from src+2...
	jle Nposs33			# if so, goto Nposs33:
	iaddq $1, %rax			# count++
Nposs33:
	rmmovq %r10, 16(%rsi)	# ...and store src+2 it to dst+2
	andq %r10, %r10		    # val2 <= 0?

Nposs2:
	mrmovq 8(%rdi), %r10	# read val1 from src+1...
	jle Nposs22			# if so, goto Nposs22:
	iaddq $1, %rax			# count++
Nposs22:
	rmmovq %r10, 8(%rsi)	# ...and store src+1 it to dst+1
	andq %r10, %r10		    # val1 <= 0?

Nposs1:
	mrmovq (%rdi), %r10		# read val0 from src+0...
	jle Nposs11			# if so, goto Nposs11:
	iaddq $1, %rax			# count++
Nposs11:
	rmmovq %r10, (%rsi)		# ...and store src+0 it to dst+0
	
	andq %r10, %r10		    # val0 <= 0?
	jle Done			# if so, goto Done:
	iaddq $1, %rax			# count++
	
	


##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad -1
	.quad -2
	.quad -3
	.quad -4
	.quad 5
	.quad -6
	.quad 7
	.quad -8
	.quad 9
	.quad -10
	.quad -11
	.quad 12
	.quad -13
	.quad -14
	.quad 15
	.quad -16
	.quad -17
	.quad -18
	.quad 19
	.quad -20
	.quad 21
	.quad 22
	.quad -23
	.quad 24
	.quad -25
	.quad -26
	.quad 27
	.quad 28
	.quad -29
	.quad 30
	.quad 31
	.quad 32
	.quad 33
	.quad -34
	.quad 35
	.quad 36
	.quad 37
	.quad 38
	.quad 39
	.quad -40
	.quad -41
	.quad 42
	.quad -43
	.quad -44
	.quad -45
	.quad 46
	.quad 47
	.quad -48
	.quad 49
	.quad 50
	.quad -51
	.quad 52
	.quad -53
	.quad 54
	.quad 55
	.quad 56
	.quad -57
	.quad -58
	.quad 59
	.quad -60
	.quad -61
	.quad -62
	.quad 63
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
