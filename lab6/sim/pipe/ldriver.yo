                            | #######################################################################
                            | # Test for copying block of size 63;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f45808000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f23f00000000000000 | 	irmovq $63, %rdx		# src and dst have 63 elements
0x014: 30f6d805000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7d003000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | # name: Yitian Zhou
                            | # student_id: 518030910237
                            | 
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
                            | 
0x032: 6300                 | 	xorq %rax,%rax		# count = 0;
0x034: 6222                 | 	andq %rdx,%rdx		# len > 0?
0x036: 764000000000000000   | 	jg Loop		# if so, goto Loop:
0x03f: 90                   | 	ret
                            | 	
                            | 
0x040:                      | Loop:	
0x040: c0f2f7ffffffffffffff | 	iaddq $-9, %rdx			# to test if len < 9
0x04a: 72e401000000000000   | 	jl Last_Loop		# if so, goto Last_Loop:
                            | 
0x053: 50870000000000000000 | 	mrmovq (%rdi), %r8	    # read val0 from src...
0x05d: 50970800000000000000 | 	mrmovq 8(%rdi), %r9		# read val1 from src+1...
0x067: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10	# read val2 from src+2...
0x071: 50b71800000000000000 | 	mrmovq 24(%rdi), %r11	# read val3 from src+3...
0x07b: 50c72000000000000000 | 	mrmovq 32(%rdi), %r12	# read val4 from src+4...
0x085: 50d72800000000000000 | 	mrmovq 40(%rdi), %r13	# read val5 from src+5...
0x08f: 50e73000000000000000 | 	mrmovq 48(%rdi), %r14	# read val6 from src+6...
0x099: 50173800000000000000 | 	mrmovq 56(%rdi), %rcx	# read val7 from src+7...
0x0a3: 50374000000000000000 | 	mrmovq 64(%rdi), %rbx	# read val7 from src+8...
                            |                                                                   
                            | 	
0x0ad: 40860000000000000000 | 	rmmovq %r8, (%rsi)	    # ...and store src it to dst
0x0b7: 6288                 | 	andq %r8, %r8		    # val0 <= 0?
0x0b9: 71cc00000000000000   | 	jle Npos1		    # if so, goto Npos1:
0x0c2: c0f00100000000000000 | 	iaddq $1, %rax			# count+=1
0x0cc:                      | Npos1:
0x0cc: 40960800000000000000 | 	rmmovq %r9, 8(%rsi)	# ...and store src+1 it to dst+1
0x0d6: 6299                 | 	andq %r9, %r9  	    # val1 <= 0?
0x0d8: 71eb00000000000000   | 	jle Npos2		    # if so, goto Npos2:
0x0e1: c0f00100000000000000 | 	iaddq $1, %rax			# count+=1
0x0eb:                      | Npos2:
0x0eb: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)	# ...and store src+2 it to dst+2
0x0f5: 62aa                 | 	andq %r10, %r10		    # val2 <= 0?
0x0f7: 710a01000000000000   | 	jle Npos3		    # if so, goto Npos3:
0x100: c0f00100000000000000 | 	iaddq $1, %rax			# count+=1
0x10a:                      | Npos3:
0x10a: 40b61800000000000000 | 	rmmovq %r11, 24(%rsi)	# ...and store src+3 it to dst+3
0x114: 62bb                 | 	andq %r11, %r11		    # val3 <= 0?
0x116: 712901000000000000   | 	jle Npos4		    # if so, goto Npos4:
0x11f: c0f00100000000000000 | 	iaddq $1, %rax          # count+=1
0x129:                      | Npos4:															
0x129: 40c62000000000000000 | 	rmmovq %r12, 32(%rsi)	    # ...and store src+4 it to dst+4
0x133: 62cc                 | 	andq %r12, %r12		    # val4 <= 0?
0x135: 714801000000000000   | 	jle Npos5		    # if so, goto Npos5:
0x13e: c0f00100000000000000 | 	iaddq $1, %rax			# count+=1
0x148:                      | Npos5:
0x148: 40d62800000000000000 | 	rmmovq %r13, 40(%rsi)	# ...and store src+5 it to dst+5
0x152: 62dd                 | 	andq %r13, %r13  	    # val5 <= 0?
0x154: 716701000000000000   | 	jle Npos6		    # if so, goto Npos6:
0x15d: c0f00100000000000000 | 	iaddq $1, %rax			# count+=1
0x167:                      | Npos6:															
0x167: 40e63000000000000000 | 	rmmovq %r14, 48(%rsi)	# ...and store src+6 it to dst+6
0x171: 62ee                 | 	andq %r14, %r14		    # val6 <= 0?
0x173: 718601000000000000   | 	jle Npos7		    # if so, goto Npos7:
0x17c: c0f00100000000000000 | 	iaddq $1, %rax			# count+=1
0x186:                      | Npos7:
0x186: 40163800000000000000 | 	rmmovq %rcx, 56(%rsi)	# ...and store src+7 it to dst+7
0x190: 6211                 | 	andq %rcx, %rcx  	    # val7 <= 0?
0x192: 71a501000000000000   | 	jle Npos8		    # if so, goto Npos8:
0x19b: c0f00100000000000000 | 	iaddq $1, %rax			# count+=1
0x1a5:                      | Npos8:
0x1a5: 40364000000000000000 | 	rmmovq %rbx, 64(%rsi)	# ...and store src+8 it to dst+8
0x1af: 6233                 | 	andq %rbx, %rbx  	    # val8 <= 0?
0x1b1: 71c401000000000000   | 	jle Npos9		    # if so, goto Npos9:
0x1ba: c0f00100000000000000 | 	iaddq $1, %rax			# count+=1
0x1c4:                      | Npos9:
0x1c4: c0f74800000000000000 | 	iaddq $72, %rdi			# src+=9
0x1ce: c0f64800000000000000 | 	iaddq $72, %rsi			# dst+=9
0x1d8: 6222                 | 	andq %rdx,%rdx			# test len>0
0x1da: 764000000000000000   | 	jg Loop				# if so, goto Loop:
0x1e3: 90                   | 	ret
                            | 
                            | #Last_Loop:
                            | #	iaddq $9, %rdx
                            | #	je Done				# if len=0, goto Done:
                            | #
                            | #	mrmovq (%rdi), %r8	    # read val from src...
                            | #	mrmovq 8(%rdi), %r9		# read val from src+1...
                            | #	mrmovq 16(%rdi), %r10	# read val from src+2...
                            | #	mrmovq 24(%rdi), %r11	# read val from src+3...
                            | #	mrmovq 32(%rdi), %r12	# read val from src+4...	
                            | #	mrmovq 40(%rdi), %r13	# read val from src+5...
                            | #	mrmovq 48(%rdi), %r14	# read val from src+6...
                            | #	mrmovq 56(%rdi), %rcx	# read val from src+7...	
                            | #						
                            | #   rmmovq %r8, (%rsi)	# ...and store src it to dst
                            | #	andq %r8, %r8		    # val1 <= 0?
                            | #	jle Nposs1		    # if so, goto Nposs1:
                            | #	iaddq $1, %rax			# count+=1
                            | #Nposs1:
                            | #	iaddq $-1, %rdx			# len--
                            | #	jg Nposs11			# else, goto Nposs11: 
                            | #	ret
                            | #Nposs11:
                            | #	rmmovq %r9, 8(%rsi)	# ...and store src+1 it to dst+1
                            | #	andq %r9, %r9  	    # val2 <= 0?
                            | #	jle Nposs2		    # if so, goto Nposs2:
                            | #	iaddq $1, %rax			# count+=1
                            | #Nposs2:
                            | #	iaddq $-1, %rdx			# len--
                            | #	jg Nposs22			# else, goto Nposs22: 
                            | #	ret
                            | #Nposs22:
                            | #	rmmovq %r10, 16(%rsi)	# ...and store src+2 it to dst+2
                            | #	andq %r10, %r10		    # val3 <= 0?
                            | #	jle Nposs3		    # if so, goto Nposs3:
                            | #	iaddq $1, %rax			# count+=1
                            | #Nposs3:
                            | #	iaddq $-1, %rdx			# len--
                            | #	jg Nposs33			# else, goto Nposs33: 
                            | #	ret
                            | #Nposs33:
                            | #	rmmovq %r11, 24(%rsi)	# ...and store src+3 it to dst+3
                            | #	andq %r11, %r11		    # val4 <= 0?
                            | #	jle Nposs4		    # if so, goto Nposs4:
                            | #	iaddq $1, %rax          # count+=1
                            | #Nposs4:	
                            | #	iaddq $-1, %rdx			# len--
                            | #	jg Nposs44			# else, goto Nposs44: 
                            | #	ret
                            | #Nposs44:
                            | #	rmmovq %r12, 32(%rsi)	# ...and store src+2 it to dst+2
                            | #	andq %r12, %r12		    # val5 <= 0?
                            | #	jle Nposs5		    # if so, goto Nposs5:
                            | #	iaddq $1, %rax			# count+=1
                            | #Nposs5:
                            | #	iaddq $-1, %rdx			# len--
                            | #	jg Nposs55			# else, goto Nposs55: 
                            | #	ret
                            | #Nposs55:
                            | #	rmmovq %r13, 40(%rsi)	# ...and store src+2 it to dst+2
                            | #	andq %r13, %r13		    # val6 <= 0?
                            | #	jle Nposs6		    # if so, goto Nposs6:
                            | #	iaddq $1, %rax			# count+=1
                            | #Nposs6:
                            | #	iaddq $-1, %rdx			# len--
                            | #	jg Nposs66			# else, goto Nposs66: 
                            | #	ret
                            | #Nposs66:
                            | #	rmmovq %r14, 48(%rsi)	# ...and store src+2 it to dst+2
                            | #	andq %r14, %r14		    # val6 <= 0?
                            | #	jle Nposs7		    # if so, goto Nposs7:
                            | #	iaddq $1, %rax			# count+=1
                            | #Nposs7:
                            | #	iaddq $-1, %rdx			# len--
                            | #	jg Nposs77			# else, goto Nposs77: 
                            | #	ret
                            | #Nposs77:
                            | #	rmmovq %rcx, 56(%rsi)	# ...and store src it to dst
                            | #	andq %rcx, %rcx 	    # val7 <= 0?
                            | #	jle Done		    # if so, goto Done:
                            | #	iaddq $1, %rax			# count+=1
                            | #
                            | 
0x1e4:                      | Last_Loop:
0x1e4: c0f20600000000000000 | 	iaddq $6, %rdx			# test the relationship of left and 3
                            | 
0x1ee: 720902000000000000   | 	jl left012				# if left < 3 
0x1f7: 764c02000000000000   | 	jg left45678					# if left > 3 
0x200: 703e03000000000000   | 	jmp Nposs3				# if left = 3
0x209:                      | left012:
0x209: c0f20200000000000000 | 	iaddq $2, %rdx			# now left = 0 or 1 or 2, test the relationship of left and 1
0x213: 739003000000000000   | 	je Nposs1				# if left = 1
0x21c: c0f2ffffffffffffffff | 	iaddq $-1, %rdx			
0x226: 736703000000000000   | 	je Nposs2				# if left = 2
0x22f: 90                   | 	ret						# if left = 0
0x230:                      | left45:
0x230: c0f20100000000000000 | 	iaddq $1, %rdx			# now left = 4 or 5
0x23a: 721503000000000000   | 	jl Nposs4
0x243: 70ec02000000000000   | 	jmp Nposs5
0x24c:                      | left45678:
0x24c: c0f2fdffffffffffffff | 	iaddq $-3, %rdx			# test the relationship of left and 6
0x256: 723002000000000000   | 	jl left45				# if left < 6
0x25f: 767102000000000000   | 	jg left78				# if left > 6
0x268: 70c302000000000000   | 	jmp Nposs6				# if left = 6
0x271:                      | left78:			
0x271: c0f2ffffffffffffffff | 	iaddq $-1, %rdx			# now left = 7 or 8
0x27b: 739a02000000000000   | 	je Nposs7
                            | 
0x284: 50a73800000000000000 | 	mrmovq 56(%rdi), %r10	# read val7 from src+7...
0x28e: 40a63800000000000000 | 	rmmovq %r10, 56(%rsi)	# ...and store src+7 it to dst+7
0x298: 62aa                 | 	andq %r10, %r10		    # val7 <= 0?
                            | 
0x29a:                      | Nposs7:
0x29a: 50a73000000000000000 | 	mrmovq 48(%rdi), %r10	# read val6 from src+6...
0x2a4: 71b702000000000000   | 	jle Nposs77			# if so, goto Nposs77:
0x2ad: c0f00100000000000000 | 	iaddq $1, %rax			# count++
0x2b7:                      | Nposs77:
0x2b7: 40a63000000000000000 | 	rmmovq %r10, 48(%rsi)	# ...and store src+6 it to dst+6
0x2c1: 62aa                 | 	andq %r10, %r10		    # val6 <= 0?
                            | 
0x2c3:                      | Nposs6:
0x2c3: 50a72800000000000000 | 	mrmovq 40(%rdi), %r10	# read val5 from src+5...
0x2cd: 71e002000000000000   | 	jle Nposs66			# if so, goto Nposs66:
0x2d6: c0f00100000000000000 | 	iaddq $1, %rax			# count++
0x2e0:                      | Nposs66:
0x2e0: 40a62800000000000000 | 	rmmovq %r10, 40(%rsi)	# ...and store src+5 it to dst+5
0x2ea: 62aa                 | 	andq %r10, %r10		    # val5 <= 0?
                            | 
0x2ec:                      | Nposs5:
0x2ec: 50a72000000000000000 | 	mrmovq 32(%rdi), %r10	# read val4 from src+4...
0x2f6: 710903000000000000   | 	jle Nposs55			# if so, goto Nposs55:
0x2ff: c0f00100000000000000 | 	iaddq $1, %rax			# count++
0x309:                      | Nposs55:
0x309: 40a62000000000000000 | 	rmmovq %r10, 32(%rsi)	# ...and store src+4 it to dst+4
0x313: 62aa                 | 	andq %r10, %r10		    # val4 <= 0?
                            | 
0x315:                      | Nposs4:
0x315: 50a71800000000000000 | 	mrmovq 24(%rdi), %r10	# read val3 from src+3...
0x31f: 713203000000000000   | 	jle Nposs44			# if so, goto Nposs44:
0x328: c0f00100000000000000 | 	iaddq $1, %rax			# count++
0x332:                      | Nposs44:	
0x332: 40a61800000000000000 | 	rmmovq %r10, 24(%rsi)	# ...and store src+3 it to dst+3
0x33c: 62aa                 | 	andq %r10, %r10		    # val3 <= 0?
                            | 
0x33e:                      | Nposs3:
0x33e: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10	# read val2 from src+2...
0x348: 715b03000000000000   | 	jle Nposs33			# if so, goto Nposs33:
0x351: c0f00100000000000000 | 	iaddq $1, %rax			# count++
0x35b:                      | Nposs33:
0x35b: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)	# ...and store src+2 it to dst+2
0x365: 62aa                 | 	andq %r10, %r10		    # val2 <= 0?
                            | 
0x367:                      | Nposs2:
0x367: 50a70800000000000000 | 	mrmovq 8(%rdi), %r10	# read val1 from src+1...
0x371: 718403000000000000   | 	jle Nposs22			# if so, goto Nposs22:
0x37a: c0f00100000000000000 | 	iaddq $1, %rax			# count++
0x384:                      | Nposs22:
0x384: 40a60800000000000000 | 	rmmovq %r10, 8(%rsi)	# ...and store src+1 it to dst+1
0x38e: 62aa                 | 	andq %r10, %r10		    # val1 <= 0?
                            | 
0x390:                      | Nposs1:
0x390: 50a70000000000000000 | 	mrmovq (%rdi), %r10		# read val0 from src+0...
0x39a: 71ad03000000000000   | 	jle Nposs11			# if so, goto Nposs11:
0x3a3: c0f00100000000000000 | 	iaddq $1, %rax			# count++
0x3ad:                      | Nposs11:
0x3ad: 40a60000000000000000 | 	rmmovq %r10, (%rsi)		# ...and store src+0 it to dst+0
                            | 	
0x3b7: 62aa                 | 	andq %r10, %r10		    # val0 <= 0?
0x3b9: 71cc03000000000000   | 	jle Done			# if so, goto Done:
0x3c2: c0f00100000000000000 | 	iaddq $1, %rax			# count++
                            | 	
                            | 	
                            | 
                            | 
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x3cc:                      | Done:
0x3cc: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x3cd:                      | End:
                            | #/* $end ncopy-ys */
0x3cd:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x3d0:                      | 	.align 8
0x3d0:                      | src:
0x3d0: ffffffffffffffff     | 	.quad -1
0x3d8: feffffffffffffff     | 	.quad -2
0x3e0: fdffffffffffffff     | 	.quad -3
0x3e8: fcffffffffffffff     | 	.quad -4
0x3f0: 0500000000000000     | 	.quad 5
0x3f8: faffffffffffffff     | 	.quad -6
0x400: 0700000000000000     | 	.quad 7
0x408: f8ffffffffffffff     | 	.quad -8
0x410: 0900000000000000     | 	.quad 9
0x418: f6ffffffffffffff     | 	.quad -10
0x420: f5ffffffffffffff     | 	.quad -11
0x428: 0c00000000000000     | 	.quad 12
0x430: f3ffffffffffffff     | 	.quad -13
0x438: f2ffffffffffffff     | 	.quad -14
0x440: 0f00000000000000     | 	.quad 15
0x448: f0ffffffffffffff     | 	.quad -16
0x450: efffffffffffffff     | 	.quad -17
0x458: eeffffffffffffff     | 	.quad -18
0x460: 1300000000000000     | 	.quad 19
0x468: ecffffffffffffff     | 	.quad -20
0x470: 1500000000000000     | 	.quad 21
0x478: 1600000000000000     | 	.quad 22
0x480: e9ffffffffffffff     | 	.quad -23
0x488: 1800000000000000     | 	.quad 24
0x490: e7ffffffffffffff     | 	.quad -25
0x498: e6ffffffffffffff     | 	.quad -26
0x4a0: 1b00000000000000     | 	.quad 27
0x4a8: 1c00000000000000     | 	.quad 28
0x4b0: e3ffffffffffffff     | 	.quad -29
0x4b8: 1e00000000000000     | 	.quad 30
0x4c0: 1f00000000000000     | 	.quad 31
0x4c8: 2000000000000000     | 	.quad 32
0x4d0: 2100000000000000     | 	.quad 33
0x4d8: deffffffffffffff     | 	.quad -34
0x4e0: 2300000000000000     | 	.quad 35
0x4e8: 2400000000000000     | 	.quad 36
0x4f0: 2500000000000000     | 	.quad 37
0x4f8: 2600000000000000     | 	.quad 38
0x500: 2700000000000000     | 	.quad 39
0x508: d8ffffffffffffff     | 	.quad -40
0x510: d7ffffffffffffff     | 	.quad -41
0x518: 2a00000000000000     | 	.quad 42
0x520: d5ffffffffffffff     | 	.quad -43
0x528: d4ffffffffffffff     | 	.quad -44
0x530: d3ffffffffffffff     | 	.quad -45
0x538: 2e00000000000000     | 	.quad 46
0x540: 2f00000000000000     | 	.quad 47
0x548: d0ffffffffffffff     | 	.quad -48
0x550: 3100000000000000     | 	.quad 49
0x558: 3200000000000000     | 	.quad 50
0x560: cdffffffffffffff     | 	.quad -51
0x568: 3400000000000000     | 	.quad 52
0x570: cbffffffffffffff     | 	.quad -53
0x578: 3600000000000000     | 	.quad 54
0x580: 3700000000000000     | 	.quad 55
0x588: 3800000000000000     | 	.quad 56
0x590: c7ffffffffffffff     | 	.quad -57
0x598: c6ffffffffffffff     | 	.quad -58
0x5a0: 3b00000000000000     | 	.quad 59
0x5a8: c4ffffffffffffff     | 	.quad -60
0x5b0: c3ffffffffffffff     | 	.quad -61
0x5b8: c2ffffffffffffff     | 	.quad -62
0x5c0: 3f00000000000000     | 	.quad 63
0x5c8: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x5d0:                      | 	.align 16
0x5d0:                      | Predest:
0x5d0: fadebc0000000000     | 	.quad 0xbcdefa
0x5d8:                      | dest:
0x5d8: abefcd0000000000     | 	.quad 0xcdefab
0x5e0: abefcd0000000000     | 	.quad 0xcdefab
0x5e8: abefcd0000000000     | 	.quad 0xcdefab
0x5f0: abefcd0000000000     | 	.quad 0xcdefab
0x5f8: abefcd0000000000     | 	.quad 0xcdefab
0x600: abefcd0000000000     | 	.quad 0xcdefab
0x608: abefcd0000000000     | 	.quad 0xcdefab
0x610: abefcd0000000000     | 	.quad 0xcdefab
0x618: abefcd0000000000     | 	.quad 0xcdefab
0x620: abefcd0000000000     | 	.quad 0xcdefab
0x628: abefcd0000000000     | 	.quad 0xcdefab
0x630: abefcd0000000000     | 	.quad 0xcdefab
0x638: abefcd0000000000     | 	.quad 0xcdefab
0x640: abefcd0000000000     | 	.quad 0xcdefab
0x648: abefcd0000000000     | 	.quad 0xcdefab
0x650: abefcd0000000000     | 	.quad 0xcdefab
0x658: abefcd0000000000     | 	.quad 0xcdefab
0x660: abefcd0000000000     | 	.quad 0xcdefab
0x668: abefcd0000000000     | 	.quad 0xcdefab
0x670: abefcd0000000000     | 	.quad 0xcdefab
0x678: abefcd0000000000     | 	.quad 0xcdefab
0x680: abefcd0000000000     | 	.quad 0xcdefab
0x688: abefcd0000000000     | 	.quad 0xcdefab
0x690: abefcd0000000000     | 	.quad 0xcdefab
0x698: abefcd0000000000     | 	.quad 0xcdefab
0x6a0: abefcd0000000000     | 	.quad 0xcdefab
0x6a8: abefcd0000000000     | 	.quad 0xcdefab
0x6b0: abefcd0000000000     | 	.quad 0xcdefab
0x6b8: abefcd0000000000     | 	.quad 0xcdefab
0x6c0: abefcd0000000000     | 	.quad 0xcdefab
0x6c8: abefcd0000000000     | 	.quad 0xcdefab
0x6d0: abefcd0000000000     | 	.quad 0xcdefab
0x6d8: abefcd0000000000     | 	.quad 0xcdefab
0x6e0: abefcd0000000000     | 	.quad 0xcdefab
0x6e8: abefcd0000000000     | 	.quad 0xcdefab
0x6f0: abefcd0000000000     | 	.quad 0xcdefab
0x6f8: abefcd0000000000     | 	.quad 0xcdefab
0x700: abefcd0000000000     | 	.quad 0xcdefab
0x708: abefcd0000000000     | 	.quad 0xcdefab
0x710: abefcd0000000000     | 	.quad 0xcdefab
0x718: abefcd0000000000     | 	.quad 0xcdefab
0x720: abefcd0000000000     | 	.quad 0xcdefab
0x728: abefcd0000000000     | 	.quad 0xcdefab
0x730: abefcd0000000000     | 	.quad 0xcdefab
0x738: abefcd0000000000     | 	.quad 0xcdefab
0x740: abefcd0000000000     | 	.quad 0xcdefab
0x748: abefcd0000000000     | 	.quad 0xcdefab
0x750: abefcd0000000000     | 	.quad 0xcdefab
0x758: abefcd0000000000     | 	.quad 0xcdefab
0x760: abefcd0000000000     | 	.quad 0xcdefab
0x768: abefcd0000000000     | 	.quad 0xcdefab
0x770: abefcd0000000000     | 	.quad 0xcdefab
0x778: abefcd0000000000     | 	.quad 0xcdefab
0x780: abefcd0000000000     | 	.quad 0xcdefab
0x788: abefcd0000000000     | 	.quad 0xcdefab
0x790: abefcd0000000000     | 	.quad 0xcdefab
0x798: abefcd0000000000     | 	.quad 0xcdefab
0x7a0: abefcd0000000000     | 	.quad 0xcdefab
0x7a8: abefcd0000000000     | 	.quad 0xcdefab
0x7b0: abefcd0000000000     | 	.quad 0xcdefab
0x7b8: abefcd0000000000     | 	.quad 0xcdefab
0x7c0: abefcd0000000000     | 	.quad 0xcdefab
0x7c8: abefcd0000000000     | 	.quad 0xcdefab
0x7d0:                      | Postdest:
0x7d0: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x7d8:                      | .align 8
                            | # Run time stack
0x7d8: 0000000000000000     | 	.quad 0
0x7e0: 0000000000000000     | 	.quad 0
0x7e8: 0000000000000000     | 	.quad 0
0x7f0: 0000000000000000     | 	.quad 0
0x7f8: 0000000000000000     | 	.quad 0
0x800: 0000000000000000     | 	.quad 0
0x808: 0000000000000000     | 	.quad 0
0x810: 0000000000000000     | 	.quad 0
0x818: 0000000000000000     | 	.quad 0
0x820: 0000000000000000     | 	.quad 0
0x828: 0000000000000000     | 	.quad 0
0x830: 0000000000000000     | 	.quad 0
0x838: 0000000000000000     | 	.quad 0
0x840: 0000000000000000     | 	.quad 0
0x848: 0000000000000000     | 	.quad 0
0x850: 0000000000000000     | 	.quad 0
                            | 
0x858:                      | Stack:
